/*
 * This file is generated by jOOQ.
 */
package org.egorkazantsev.library.repository.generated.jooq.tables;


import java.util.UUID;

import org.egorkazantsev.library.repository.generated.jooq.Keys;
import org.egorkazantsev.library.repository.generated.jooq.Public;
import org.egorkazantsev.library.repository.generated.jooq.tables.records.ReaderRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reader extends TableImpl<ReaderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.reader</code>
     */
    public static final Reader READER = new Reader();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReaderRecord> getRecordType() {
        return ReaderRecord.class;
    }

    /**
     * The column <code>public.reader.id</code>.
     */
    public final TableField<ReaderRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.reader.full_name</code>.
     */
    public final TableField<ReaderRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.reader.address</code>.
     */
    public final TableField<ReaderRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.reader.contacts</code>.
     */
    public final TableField<ReaderRecord, String> CONTACTS = createField(DSL.name("contacts"), SQLDataType.VARCHAR.nullable(false), this, "");

    private Reader(Name alias, Table<ReaderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reader(Name alias, Table<ReaderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.reader</code> table reference
     */
    public Reader(String alias) {
        this(DSL.name(alias), READER);
    }

    /**
     * Create an aliased <code>public.reader</code> table reference
     */
    public Reader(Name alias) {
        this(alias, READER);
    }

    /**
     * Create a <code>public.reader</code> table reference
     */
    public Reader() {
        this(DSL.name("reader"), null);
    }

    public <O extends Record> Reader(Table<O> child, ForeignKey<O, ReaderRecord> key) {
        super(child, key, READER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ReaderRecord> getPrimaryKey() {
        return Keys.READER_PKEY;
    }

    @Override
    public Reader as(String alias) {
        return new Reader(DSL.name(alias), this);
    }

    @Override
    public Reader as(Name alias) {
        return new Reader(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reader rename(String name) {
        return new Reader(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reader rename(Name name) {
        return new Reader(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
