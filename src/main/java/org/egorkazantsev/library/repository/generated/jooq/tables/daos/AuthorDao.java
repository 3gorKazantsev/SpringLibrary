/*
 * This file is generated by jOOQ.
 */
package org.egorkazantsev.library.repository.generated.jooq.tables.daos;


import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.egorkazantsev.library.repository.generated.jooq.tables.Author;
import org.egorkazantsev.library.repository.generated.jooq.tables.records.AuthorRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorDao extends DAOImpl<AuthorRecord, org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Author, UUID> {

    /**
     * Create a new AuthorDao without any configuration
     */
    public AuthorDao() {
        super(Author.AUTHOR, org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Author.class);
    }

    /**
     * Create a new AuthorDao with an attached configuration
     */
    public AuthorDao(Configuration configuration) {
        super(Author.AUTHOR, org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Author.class, configuration);
    }

    @Override
    public UUID getId(org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Author object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Author> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Author.AUTHOR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Author> fetchById(UUID... values) {
        return fetch(Author.AUTHOR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Author fetchOneById(UUID value) {
        return fetchOne(Author.AUTHOR.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Author> fetchOptionalById(UUID value) {
        return fetchOptional(Author.AUTHOR.ID, value);
    }

    /**
     * Fetch records that have <code>full_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Author> fetchRangeOfFullName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.FULL_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>full_name IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Author> fetchByFullName(String... values) {
        return fetch(Author.AUTHOR.FULL_NAME, values);
    }

    /**
     * Fetch records that have <code>bio BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Author> fetchRangeOfBio(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.BIO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>bio IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Author> fetchByBio(String... values) {
        return fetch(Author.AUTHOR.BIO, values);
    }
}
