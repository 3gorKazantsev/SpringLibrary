/*
 * This file is generated by jOOQ.
 */
package org.egorkazantsev.library.repository.generated.jooq.tables.daos;


import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.egorkazantsev.library.repository.generated.jooq.tables.Book;
import org.egorkazantsev.library.repository.generated.jooq.tables.records.BookRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookDao extends DAOImpl<BookRecord, org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book, UUID> {

    /**
     * Create a new BookDao without any configuration
     */
    public BookDao() {
        super(Book.BOOK, org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book.class);
    }

    /**
     * Create a new BookDao with an attached configuration
     */
    public BookDao(Configuration configuration) {
        super(Book.BOOK, org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book.class, configuration);
    }

    @Override
    public UUID getId(org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Book.BOOK.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchById(UUID... values) {
        return fetch(Book.BOOK.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book fetchOneById(UUID value) {
        return fetchOne(Book.BOOK.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchOptionalById(UUID value) {
        return fetchOptional(Book.BOOK.ID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Book.BOOK.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchByTitle(String... values) {
        return fetch(Book.BOOK.TITLE, values);
    }

    /**
     * Fetch records that have <code>author_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchRangeOfAuthorId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Book.BOOK.AUTHOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>author_id IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchByAuthorId(UUID... values) {
        return fetch(Book.BOOK.AUTHOR_ID, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Book.BOOK.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchByDescription(String... values) {
        return fetch(Book.BOOK.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>genre BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchRangeOfGenre(String lowerInclusive, String upperInclusive) {
        return fetchRange(Book.BOOK.GENRE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>genre IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchByGenre(String... values) {
        return fetch(Book.BOOK.GENRE, values);
    }

    /**
     * Fetch records that have <code>stock BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchRangeOfStock(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Book.BOOK.STOCK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stock IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.Book> fetchByStock(Integer... values) {
        return fetch(Book.BOOK.STOCK, values);
    }
}
