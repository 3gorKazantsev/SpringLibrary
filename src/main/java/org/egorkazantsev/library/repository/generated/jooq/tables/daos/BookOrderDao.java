/*
 * This file is generated by jOOQ.
 */
package org.egorkazantsev.library.repository.generated.jooq.tables.daos;


import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.egorkazantsev.library.repository.generated.jooq.tables.BookOrder;
import org.egorkazantsev.library.repository.generated.jooq.tables.records.BookOrderRecord;
import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.jooq.types.YearToSecond;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookOrderDao extends DAOImpl<BookOrderRecord, org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder, UUID> {

    /**
     * Create a new BookOrderDao without any configuration
     */
    public BookOrderDao() {
        super(BookOrder.BOOK_ORDER, org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder.class);
    }

    /**
     * Create a new BookOrderDao with an attached configuration
     */
    public BookOrderDao(Configuration configuration) {
        super(BookOrder.BOOK_ORDER, org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder.class, configuration);
    }

    @Override
    public UUID getId(org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(BookOrder.BOOK_ORDER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder> fetchById(UUID... values) {
        return fetch(BookOrder.BOOK_ORDER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder fetchOneById(UUID value) {
        return fetchOne(BookOrder.BOOK_ORDER.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder> fetchOptionalById(UUID value) {
        return fetchOptional(BookOrder.BOOK_ORDER.ID, value);
    }

    /**
     * Fetch records that have <code>reader_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder> fetchRangeOfReaderId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(BookOrder.BOOK_ORDER.READER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>reader_id IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder> fetchByReaderId(UUID... values) {
        return fetch(BookOrder.BOOK_ORDER.READER_ID, values);
    }

    /**
     * Fetch records that have <code>book_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder> fetchRangeOfBookId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(BookOrder.BOOK_ORDER.BOOK_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>book_id IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder> fetchByBookId(UUID... values) {
        return fetch(BookOrder.BOOK_ORDER.BOOK_ID, values);
    }

    /**
     * Fetch records that have <code>borrowing_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder> fetchRangeOfBorrowingDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(BookOrder.BOOK_ORDER.BORROWING_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>borrowing_date IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder> fetchByBorrowingDate(LocalDate... values) {
        return fetch(BookOrder.BOOK_ORDER.BORROWING_DATE, values);
    }

    /**
     * Fetch records that have <code>period BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder> fetchRangeOfPeriod(YearToSecond lowerInclusive, YearToSecond upperInclusive) {
        return fetchRange(BookOrder.BOOK_ORDER.PERIOD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>period IN (values)</code>
     */
    public List<org.egorkazantsev.library.repository.generated.jooq.tables.pojos.BookOrder> fetchByPeriod(YearToSecond... values) {
        return fetch(BookOrder.BOOK_ORDER.PERIOD, values);
    }
}
